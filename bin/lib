#!/bin/bash

cprint() {
  local leader="     "

  while test $# -gt 0; do
    case "$1" in
      -p)
        leader="---->"
        shift
        ;;
      *)
        break
        ;;
    esac
  done

  echo "$leader $*"  # Print the leader followed by the remaining arguments
}

# returns mac, arch, nix, unknown linux, unknown os
# os=$(detect_os)
# echo "System is: $os"
# if [[ "$os" == "arch" ]]; then
# elif [[ "$os" == "nix" ]]; then
# elif [[ "$os" == "mac" ]]; then
# else
# fi
detect_os() {
  case "$(uname -s)" in
    Darwin*) echo "mac" ;;
    Linux*)
      if [ -f /etc/os-release ]; then
        source /etc/os-release
        case "$ID" in
          arch) echo "arch" ;;
          nixos) echo "nix" ;;
          *) echo "unknown linux" ;;
        esac
      else
        echo "unknown linux"
      fi
      ;;
    *) echo "unknown os" ;;
  esac
}

copy_from_to() {
  local source="$1"
  local destination="$2"

  if [ ! -e "$source" ]; then
    cprint "File not found: $source"
    return 1
  fi

  # check if the destination file exists
  if [ -e "$destination" ]; then
    # check if the destination file is a symlink
    if [ -L "$destination" ]; then
      cprint "Removing symlink: $destination"
      sudo rm "$destination"
    else
      # backup the destination file
      backup "$destination"
      # local backup_file="${destination}.bak"
      # cprint "Renaming $destination to $backup_file"
      # mv "$destination" "$backup_file"
    fi
  fi

  # check if the source file is a folder
  if [ -d "$source" ]; then
    sudo cp -r "$source" "$destination"
  else
    sudo cp "$source" "$destination"
  fi

  cprint "Copied $source to $destination"
  return 0
}

backup() {
  # for all files listed as arguments
  for file in "$@"; do
    # rename the file with .bak
    sudo mv "$file" "${file}.bak"
  done
}

backup_or_remove() {
  local destination="$1"

  if [ -e "$destination" ]; then
    if [ -L "$destination" ]; then
      cprint "Removing symlink: $destination"
      sudo rm "$destination"
    else
      backup "$destination"
      # local backup_file="${destination}.bak"
      # cprint "Renaming $destination to $backup_file"
      # mv "$destination" "$backup_file"
    fi
  fi
}

link_dotfile() {
  local repo_path="${dotfilesDir}/$1"
  local home_path="${homeDir}/$2"
  
  # Skip if symlink is already correct
  if [ -L "$home_path" ] && [ "$(readlink "$home_path")" = "$repo_path" ]; then
    echo "✓ Symlink '$home_path' already correct"
    return 0
  fi

  # Backup existing file/directory if not a symlink
  if [ -e "$home_path" ] && [ ! -L "$home_path" ]; then
    local backup_base="$home_path.bak"
    local backup_path="$backup_base"
    local timestamp=$(date +%Y%m%d%H%M%S)
    
    # Append timestamp if backup exists
    [ -e "$backup_base" ] && backup_path="$backup_base.$timestamp"
    
    echo "⚠ Backing up '$home_path' to '$backup_path'"
    sudo mv -- "$home_path" "$backup_path"
  fi

  # Create parent directories if needed
  sudo mkdir -p "$(dirname "$home_path")"

  # Create/update symlink
  echo "➔ Creating symlink: '$home_path' → '$repo_path'"
  sudo ln -sfn "$repo_path" "$home_path"

  # Set correct user permissions
  echo "➔ Setting Permission: $(dirname "$home_path")"
  sudo chown "${username}:users" "$(dirname "$home_path")"

  echo "➔ Setting Permission: $home_path"
  sudo chown -h "${username}:users" "$home_path"
}
